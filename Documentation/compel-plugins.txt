compel-plugins(1)
=================
:doctype:       manpage
:man source:    compel-plugins
:man version:   0.0.1
:man manual:    compel-plugins manual

NAME
----
compel-plugins - list of compel plugins with interface description

PLUGINS
-------

Here is a list of compel plugins, which are usually shipped with *compel*
and should be provided with *-l* option if appropriate functionality needed.
Plugin *std* is always linked in on 'pack' action.

std
~~~

This plugin stands for standart service routines provided for all other plugins
and exports the following routines.

std.h
^^^^^

*int std_get_ctl_socket*(void)::
    Returns control socket which might be used to exchange data between plugins
    and libcompel itself.

*void *std_get_prologue_init_args_addr*(void)::
    Returns address of initial arguments area used by prologue code.

string.h
^^^^^^^^

*void __std_putc*(*int* 'fd', *char* 'c')::
    Writes character 'c' into file 'fd'.

*void __std_puts*(*int* 'fd', *const char* *'s')::
    Writes string 's' into file 'fd'.

*void __std_printf*(*int* 'fd', *const char* *'format', ...)::
    Writes formatted string into file 'fd'. String format is specified by
    'format'.

*unsigned long std_strtoul*(*const char* \*'nptr', *char* \*\*'endptr', *int* 'base')::
    Convert string to unsigned long.

*void *std_memcpy*(*void* \*'to', *const void* \*'from', *unsigned int* 'n')::
    Copy memory block.

*int *std_memcmp*(*const void* \*'cs', *const void* \*'ct', *size_t* 'count')::
    Compare memory blocks.

*int std_strcmp*(*const char* \*'cs', *const char* *'ct')::
    Compare strings.

syscall.h
^^^^^^^^^

There are a number of syscalls the plugin provides. See detailed list in
the header file itself.

fds
~~~

This plugin stands for file descriptor exchange over unix socket.

fds.h
^^^^^

*int send_fds*(*int* 'sock', *struct sockaddr_un* \*'saddr', *int* 'len', *int* \*'fds', *int* 'nr_fds', *bool* 'with_flags')::
    Send 'nr_fds' amount of file descriptors pointed by 'fds' via socked 'sock'
    to 'saddr' destination (the length of address is specified by 'len'). The
    flag 'with_flags' tells the routine to fetch file flags for every descriptor
    before sending them out.

*int recv_fds*(*int* 'sock', *int* \*'fds', *int* 'nr_fds', *struct fd_opts* *'opts')::
    Receive file descriptors from socket 'sock' sent by *send_fds*. The structure 'fd_opts'
    is filled by *send_fds* routine if 'with_flags' option was specifed.  Internally *send_fds*
    uses *fcntl*() syscall with *F_GETFD*, *F_GETOWN_EX*, *F_GETOWNER_UIDS* flags to fetch them.

---------------------------------------------------------------------
struct fd_opts {
	char		flags;
	struct {
		u32	uid;
		u32	euid;
		u32	signum;
		u32	pid_type;
		u32	pid;
	} fown;
};
---------------------------------------------------------------------

AUTHOR
------
OpenVZ team.

COPYING
-------
Copyright \(C) 2013-2014, Parallels Inc.
